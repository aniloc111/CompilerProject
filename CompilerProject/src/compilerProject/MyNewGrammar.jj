/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";
  LOOKAHEAD = 30000;
  FORCE_LA_CHECK = true;
  static = true;}PARSER_BEGIN(EG1)package compiler;

public class EG1{  public static void main(String args []) throws ParseException  {    EG1 parser = new EG1(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        switch (EG1.root())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("Error.");        System.out.println(e.getMessage());        EG1.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(EG1)SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
//| "#..*?.#"
// (~(".#"))*
|"(?:#.(?:[^*]|(?:\\*+[^*/]))*.#)"
}

TOKEN :
{
	< OPENCOM 	: "#." >
|   < CLOSECOM	: ".#" >
}

TOKEN : /* mdas OPERATORS */
{
  < ADD : "+" >
| < SUB : "-" >
| < MUL : "*" >
| < DIV : "/" >
| < MOD : "%" >
| < EXP : "^" >
| < EQU : "=" >
}

TOKEN : /* logical OPERATORS */
{
  < AND : "&&" >
| < OR : "||" >
| < NOT : "!" > 
}

TOKEN :
{
   <NUMBER: (<DIGIT>)+>
|  <LOGIC_CONSTANT: "true" | "false">
|  <#DIGIT: ["0"-"9"]>
}

TOKEN : /* relational OPERATORS*/
{
  < GREATERTHAN 		: ">" >
| < LESSERTHAN			: "<" >
| < LESSERTHANEQUAL		: "<=" >
| < GREATERTHANEQUAL	: ">=" >
| < EQUAL				: "==" >
| < NOTEQUAL			: "!=" >  
}

//RESERVED WORDS
TOKEN : {
  	< IF: "if" >
|  	< THEN: "then" > 
|  	< ELSE: "else" >
|	< INPUT: "input" >
| 	< PRINT: "print" >
| 	< FUNC : "func" >
}

TOKEN :
{
	< DELIM : ";" >
| 	< OPENPAR  : "(" >
| 	< CLOSEPAR : ")" >
| 	< OPENBRACE : "{" >
| 	< CLOSEBRACE : "}" > 
}

//IDENTIFIER TOKEN
TOKEN : {
  <VARIABLE: (<LETTER >)+>
| <#LETTER: (["a"-"z","A"-"Z"])>
}

int root() :
{}
{
  comment() //Ok, only accepts letters
  {
    return 0;
  }
  |
  equation()
  {
    return 0;
  }
  |
  iff() //need double delims (??)
  {
    return 0;
  }
  |
  funcbody()
  {
    return 0;
  }
  | 
  ";"
  {
  	return 1;
  }
}

void comment() :
{}
{
  < OPENCOM > (< VARIABLE >)* < CLOSECOM > //how to put anything between them as comment?
}

void mdasops() :
{}
{
  <ADD>
| <SUB>
| <MUL>
| <DIV>
| <MOD>
| <EXP>
}

void logops() :
{}
{
  <AND> | <OR> | <NOT>
}

void relops() :
{}
{
  < GREATERTHAN >
| < LESSERTHAN >
| < LESSERTHANEQUAL >
| < GREATERTHANEQUAL >
| < EQUAL  >
| < NOTEQUAL >
}

void funcname() :
{}
{	< FUNC > < VARIABLE > 
}

void expression(): //does not include '=' sign
{}
{
  term() mdasops() term()  
| term() mdasops() expression() //not working  
}

void equation() :  //complete, w/ left and right side (after the '=' sign) 
{}
{
  < VARIABLE > < EQU > expression() < DELIM >
| < VARIABLE > < EQU > term() < DELIM > //not working!
} 


void term(): //part of an expression, 3+2, terms are 3 and 2
{}
{
  < VARIABLE >
| < NUMBER >
}

void condition() :
{}
{
  < VARIABLE > relops() (< NUMBER >|< VARIABLE >)
}

void iff() :
{}
{
    < IF > < OPENPAR > condition() < CLOSEPAR > < THEN > equation() < ELSE > equation() 
|   < IF > < OPENPAR > condition() < CLOSEPAR > < THEN > equation()  
}

void block():
{}
{	< OPENBRACE > (equation()|iff()) < CLOSEBRACE >
}

void funcbody() :
{}
{
  funcname() block()
}
   

 